?RCS: $Id: d_sfio.U,v $
?RCS:
?RCS: $Log: d_sfio.U,v $
?RCS:
?MAKE:d_sfio: d_perlstdio i_sfio Inlibc Myread Oldconfig Setvar
?MAKE:	-pick add $@ %<
?S:d_sfio:
?S:	This variable conditionally defines the USE_SFIO symbol,
?S:	and indicates whether sfio is available (and should be used).
?S:.
?C:USE_SFIO:
?C:	This symbol, if defined, indicates that sfio should
?C:	be used.
?C:.
?H:#$d_sfio	USE_SFIO		/**/
?H:.
?LINT:set d_sfio
?LINT:extern usesfio
?LINT:change usesfio

: see if sfio is available
case "$i_sfio" in
$define)
	val=''
	set sfreserve val
	eval $inlibc
	;;
*)
	val="$undef"
	;;
esac
case "$val" in
$define)
	case "$usesfio" in
	true) dflt='y';;
	*) dflt='n';;
	esac
	echo "$package can use sfio library, but this is experimental."
	rp="You seem to have sfio available, do you want to try using it?"
	. ./myread
	case "$ans" in
	y|Y) 
		;;     
	*)      
		echo "Ok, avoiding sfio this time"
		val="$undef"
		;;
	esac
	;;
*)
	case "$usesfio" in
	false) ;;
	*)
		echo "Sorry cannot find sfio on this machine"
		;;
	esac
	;;
esac
?X:
?X: Only set d_sfio when final value is known to avoid spurious Whoas
?X: Then set usesfio accordingly to the current value, for next run
?X:
set d_sfio 
eval $setvar 
case "$d_sfio" in
$define) usesfio='true';;
*) usesfio='false';;
esac


