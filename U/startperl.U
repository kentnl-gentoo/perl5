?RCS: $Id: startperl.U,v 3.0 1993/08/18 12:09:50 ram Exp $
?RCS:
?RCS: Copyright (c) 1991-1993, Raphael Manfredi
?RCS: 
?RCS: You may redistribute only under the terms of the Artistic Licence,
?RCS: as specified in the README file that comes with the distribution.
?RCS: You may reuse parts of this distribution only within the terms of
?RCS: that same Artistic Licence; a copy of which may be found at the root
?RCS: of the source tree for dist 3.0.
?RCS:
?RCS: $Log: startperl.U,v $
?RCS: Perl5 version -- I always have d_portable=define.
?RCS:
?RCS: Revision 3.0  1993/08/18  12:09:50  ram
?RCS: Baseline for dist 3.0 netwide release.
?RCS:
?MAKE:startperl: cat sharpbang perlpath Myread
?MAKE:	-pick add $@ %<
?Y:TOP
?S:startperl:
?S:	This variable contains the string to put on the front of a perl
?S:	script to make sure (hopefully) that it runs with perl and not some
?S:	shell. Of course, that leading line must be followed by the classical
?S:	perl idiom:
?S:		eval 'exec perl -S $0 "$@"'
?S:			if $running_under_some_shell;
?S:	to guarantee perl startup should the shell execute the script. Note
?S:	that this magic incatation is not understood by csh.
?S:.
?C:STARTPERL:
?C:	This variable contains the string to put in front of a perl
?C:	script to make sure (one hopes) that it runs with perl and not
?C:	some shell.
?C:.
?H:#define STARTPERL "$startperl"		/**/
?H:.
: figure out how to guarantee perl startup
case "$startperl" in
'')
	case "$sharpbang" in
	*!)
		$cat <<EOH

I can use the #! construct to start perl on your system. This will
make startup of perl scripts faster, but may cause problems if you
want to share those scripts and perl is not in a standard place
($perlpath) on all your platforms. The alternative is to force
a shell by starting the script with a single ':' character.

EOH
		dflt=$perlpath
		rp='What shall I put after the #! to start up perl ("none" to not use #!)?'
		. ./myread
		case "$ans" in
		none) startperl=": # use perl";;
		*) startperl="#!$ans";;
		esac
		;;
	*) startperl=": # use perl"
		;;
	esac
	;;
esac
echo "I'll use $startperl to start perl scripts."

