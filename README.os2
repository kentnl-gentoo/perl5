If you read this file _as_is_, just ignore the funny characters you
see. It is written in the POD format (see perlpod manpage) which is
specially designed to be readable as is.

=head1 NAME

perlos2 - Perl under OS/2, Win0.31, Win0.95 and WinNT.

=head1 SYNOPSIS

One can read this document in the following formats:

	man perlos2
	view perl perlos2
	explorer perlos2.html
	info perlos2

to list some (not all may be available simultaneously), or it may
be read I<as is>: either as F<README.os2>, or F<pod/perlos2.pod>.

=cut

Contents
 
 perlos2 - Perl under OS/2 

       NAME 
       SYNOPSIS 
       DESCRIPTION 
         -  Target 
         -  Other OSes 
         -  Prerequisites 
         -  Starting Perl programs under OS/2 
         -  Starting OS/2 programs under Perl 
       Frequently asked questions 
         -  I cannot run extenal programs 
         -  I cannot embed perl into my program, or use perl.dll from my program.   
       INSTALLATION 
         -  Automatic binary installation 
         -  Manual binary installation 
         -  Warning 
       Accessing documentation 
         -  OS/2 .INF file 
         -  Plain text 
         -  Manpages 
         -  HTML 
         -  GNU info files 
         -  .PDF files 
         -  LaTeX docs 
       BUILD 
         -  Prerequisites 
         -  Getting perl source 
         -  Application of the patches 
         -  Hand-editing 
         -  Making 
         -  Testing 
         -  Installing the built perl 
         -  a.out-style build 
       Build FAQ 
         -  Some / became \ in pdksh. 
         -  'errno' - unresolved external 
         -  Problems with tr 
         -  Some problem (forget which ;-) 
         -  Library ... not found 
         -  Segfault in make
       Specific (mis)features of OS/2 port 
         -  setpriority, getpriority 
         -  system() 
         -  Additional modules: 
         -  Prebuilt methods: 
         -  Misfeatures 
       Perl flavors 
         -  perl.exe 
         -  perl_.exe 
         -  perl__.exe 
         -  perl___.exe 
         -  Why strange names? 
         -  Why dynamic linking? 
         -  Why chimera build? 
       ENVIRONMENT 
         -  PERLLIB_PREFIX 
         -  PERL_BADLANG 
         -  PERL_BADFREE 
         -  PERL_SH_DIR 
         -  TMP or TEMP 
       Evolution 
         -  Priorities 
         -  DLL name mungling 
         -  Threading 
         -  Calls to external programs 
       AUTHOR 
       SEE ALSO 

=head1 DESCRIPTION

=head2 Target

The target is to make OS/2 the best supported platform for
using/building/developping Perl and I<Perl applications>, as well as
make Perl the best language to use under OS/2.

The current state is quite close to this target. Known limitations:

=over 5

=item *

Some *nix programs use fork() a lot, but currently fork() is not
supported after I<use>ing dynamically loaded extensions.

=item *

You need a separate perl executable F<perl__.exe> (see L<perl__.exe>)
to use PM code in your application (like the forthcoming Perl/Tk).

=item *

There is no simple way to access B<WPS> objects. The only way I know
is via C<OS2::REXX> extension (see L<OS2::REXX>), and we do not have access to
convinience methods of B<Object REXX>. (Is it possible at all? I know
of no B<Object-REXX> API.)

=back

Please keep this list up-to-date by informing me about other items.

=head2 Other OSes

Since OS/2 port of perl uses a remarkable B<EMX> environment, it can
run (and build extensions, and - possibly - be build itself) under any
environment which can run EMX. The current list is DOS,
DOS-inside-OS/2, Win0.31, Win0.95 and WinNT. Out of many perl flavors,
only one works, see L<"perl_.exe">.

Note that not all features of Perl are available under these
environments. This depends on the features the I<extender> - most
probably C<RSX> - decided to implement.

Cf. L<Prerequisites>.

=head2 Prerequisites

=over 6

=item B<EMX>

B<EMX> runtime is required. Note that it is possible to make F<perl_.exe>
to run under DOS without any external support by binding F<emx.exe> to
it, see L<emxbind>.

Only the latest runtime is supported, currently C<0.9c>.

One can get different parts of B<EMX> from, say

  ftp://ftp.cdrom.com/pub/os2/emx0.9c/
  ftp://hobbes.nmsu.edu/os2/unix/gnu/

The runtime component should have the name F<emxrt.zip>.

=item B<RSX>

To run Perl on C<DPMS> platforms one needs B<RSX> runtime. This is
needed under DOS-inside-OS/2, Win0.31, Win0.95 and WinNT (see 
L<"Other OSes">).

One can get B<RSX> from, say

  ftp://ftp.cdrom.com/pub/os2/emx0.9c/contrib
  ftp://ftp.uni-bielefeld.de/pub/systems/msdos/misc

Contact the author on C<rainer@mathematik.uni-bielefeld.de>.

=item B<HPFS>

Perl does not care about file systems, but to install the whole perl
library intact one needs a file system which supports long file names.

Note that if you do not plan to build the perl itself, it may be
possible to fool B<EMX> to truncate file names. This is not supported,
read B<EMX> docs to see how to do it.

=back

=head2 Starting Perl programs under OS/2

Start your Perl program F<foo.pl> with arguments C<arg1 arg2 arg3> the
same way as on any other platform, by

	perl foo.pl arg1 arg2 arg3

If you want to specify perl options C<-my_opts> to the perl itself (as
opposed to to your program), use

	perl -my_opts foo.pl arg1 arg2 arg3

Alternately, if you use OS/2-ish shell, like C<CMD> or C<4os2>, put
the following at the start of your perl script:

	extproc perl -x -S
	#!/usr/bin/perl -my_opts 

rename your program to F<foo.cmd>, and start it by typing

	foo arg1 arg2 arg3

(Note that having *nixish full path to perl F</usr/bin/perl> is not
necessary, F<perl> would be enough, but having full path would make it
easier to use your script under *nix.)

Note that because of stupid OS/2 limitations the full path of the perl
script is not available when you use C<extproc>, thus you are forced to
use C<-S> perl switch, and your script should be on path. As a plus
side, if you know a full path to your script, you may still start it
with 

	perl -x ../../blah/foo.cmd arg1 arg2 arg3

(note that the argument C<-my_opts> is taken care of by the C<#!> line
in your script).

To understand what the above I<magic> does, read perl docs about C<-S>
and C<-x> switches - see L<perlrun>, and cmdref about C<extproc>:

	view perl perlrun
	man perlrun
	view cmdref extproc
	help extproc

or whatever method you prefer.

There are also endless possibilites to use I<executable extensions> of
B<4OS2>, I<associations> of B<WPS> and so on... However, if you use
*nixish shell (like F<sh.exe> supplied in the binary distribution),
you need follow the syntax specified in L<perlrun/"Switches">.

=head2 Starting OS/2 programs under Perl

This is what system() (see L<perlfunc/system>), C<``> (see
L<perlop/"I/O Operators">), and I<open pipe> (see L<perlfunc/open>)
are for. (Avoid exec() (see L<perlfunc/exec>) unless you know what you
do).

Note however that to use some of these operators you need to have a
C<sh>-syntax shell installed (see L<"Pdksh">, 
L<"Frequently asked questions">), and perl should be able to find it
(see L<"PERL_SH_DIR">).

The only cases when the shell is not used is the multi-argument
system() (see L<perlfunc/system>)/exec() (see L<perlfunc/exec>), and
one-argument version thereof without redirection and shell
meta-characters.

=head1 Frequently asked questions

=head2 I cannot run extenal programs

Did you run your programs with C<-w> switch? See 
L<Starting OS/2 programs under Perl>.

=head2 I cannot embed perl into my program, or use F<perl.dll> from my
program. 

=over 4

=item Is your program B<EMX>-compiled with C<-Zmt -Zcrtdll>?

If not, you need to build a stand-alone DLL for perl. Contact me, I
did it once. Sockets would not work, as a lot of other stuff.

=item Did you use C<ExtUtils::Embed>?

I had reports it does not work. Somebody would need to fix it.

=back

=head1 INSTALLATION

=head2 Automatic binary installation

The most convinient way of installing perl is via perl installer
F<install.exe>. Just follow the instructions, and 99% of the
installation blues would go away. 

Note however, that you need to have F<unzip.exe> on your path, and
B<EMX> environment I<running>. The latter means that if you just
installed B<EMX>, and made all the needed changes to F<Config.sys>,
you may need to reboot in between. Check B<EMX> runtime by running

	emxrev

A folder is created on your desktop which contains some useful
objects.

B<Things not taken care of by automatic binary installation:>

=over 15

=item C<PERL_BADLANG>

may be needed if you change your codepage I<after> perl installation,
and the new value is not supported by B<EMX>. See L<"PERL_BADLANG">.

=item C<PERL_BADFREE>

see L<"PERL_BADFREE">.

=item F<Config.pm>

This file resides somewhere deep in the location you installed your
perl library, find it out by 

  perl -MConfig -le "print $INC{'Config.pm'}"

While most important values in this file I<are> updated by the binary
installer, some of them may need to be hand-edited. I know no such
data, please keep me informed if you find one.

=back

=head2 Manual binary installation

As of version 5.00305, OS/2 perl binary distribution comes splitted
into 11 components. Unfortunately, to enable configurable binary
installation, the file paths in the C<zip> files are not absolute, but
relative to some directory.

Note that the extraction with the stored paths is still necessary
(default with C<unzip>, specify C<-d> to C<pkunzip>). However, you
need to know where to extract the files. You need also to manually
change entries in F<Config.sys> to reflect where did you put the
files. 

Below is the sample of what to do to reproduce the configuration on my
machine:

=over 3

=item Perl VIO and PM executables (dynamically linked)

  unzip perl_exc.zip *.exe *.ico -d f:/emx.add/bin
  unzip perl_exc.zip *.dll -d f:/emx.add/dll

(have the directories with C<*.exe> on C<PATH>, and C<*.dll> on
C<LIBPATH>);

=item Perl_ VIO executable (statically linked)

  unzip perl_aou.zip -d f:/emx.add/bin

(have the directory on C<PATH>);

=item Executables for Perl utilities

  unzip perl_utl.zip -d f:/emx.add/bin

(have the directory on C<PATH>);

=item Main Perl library

  unzip perl_mlb.zip -d f:/perllib/lib

If this directory is preserved, you do not need to change
anything. However, for perl to find it if it is changed, you need to
C<set PERLLIB_PREFIX> in F<Config.sys>, see L<"PERLLIB_PREFIX">.

=item Additional Perl modules

  unzip perl_ste.zip -d f:/perllib/lib/site_perl

If you do not change this directory, do nothing. Otherwise put this
directory and subdirectory F<./os2> in C<PERLLIB> or C<PERL5LIB>
variable. Do not use C<PERL5LIB> unless you have it set already. See
L<perl/"ENVIRONMENT">. 

=item Tools to compile Perl modules

  unzip perl_blb.zip -d f:/perllib/lib

If this directory is preserved, you do not need to change
anything. However, for perl to find it if it is changed, you need to
C<set PERLLIB_PREFIX> in F<Config.sys>, see L<"PERLLIB_PREFIX">.

=item Manpages for Perl and utilities

  unzip perl_man.zip -d f:/perllib/man

This directory should better be on C<MANPATH>. You need to have a
working C<man> to access these files.

=item Manpages for Perl modules

  unzip perl_mam.zip -d f:/perllib/man

This directory should better be on C<MANPATH>. You need to have a
working C<man> to access these files.

=item Source for Perl documentation

  unzip perl_pod.zip -d f:/perllib/lib

This is used by by C<perldoc> program (see L<perldoc>), and may be used to
generate B<HTML> documentation usable by WWW browsers, and
documentation in zillions of other formats: C<info>, C<LaTeX>,
C<Acrobat>, C<FrameMaker> and so on.

=item Perl manual in .INF format

  unzip perl_inf.zip -d d:/os2/book

This directory should better be on C<BOOKSHELF>.

=item Pdksh

  unzip perl_sh.zip -d f:/bin

This is used by perl to run external commands which explicitely
require shell, like the commands using I<redirection> and I<shell
metacharacters>. It is also used instead of explicit F</bin/sh>.

Set C<PERL_SH_DIR> (see L<"PERL_SH_DIR">) if you move F<sh.exe> from
the above location.

B<Note.> It may be possible to use some other C<sh>-compatible shell
(I<not tested>).

=back

After you installed the components you needed and updated the
F<Config.sys> correspondingly, you need to hand-edit
F<Config.pm>. This file resides somewhere deep in the location you
installed your perl library, find it out by

  perl -MConfig -le "print $INC{'Config.pm'}"

You need to correct all the entries which look like file paths (they
currently start with C<f:/>).

=head2 B<Warning>

The automatic and manual perl installation leave precompiled paths
inside perl executables. While these paths are overwriteable (see
L<"PERLLIB_PREFIX">, L<"PERL_SH_DIR">), one may get better results by
binary editing of paths inside the executables/DLLs.

=head1 Accessing documentation

Depending on how you built/installed perl you may have (otherwise
identical) Perl documentation in the following formats:

=head2 OS/2 F<.INF> file

Most probably the most convinient form. View it as

  view perl
  view perl perlfunc
  view perl less
  view perl ExtUtils::MakeMaker

(currently the last two may hit a wrong location, but this may improve
soon).

If you want to build the docs yourself, and have I<OS/2 toolkit>, run

	pod2ipf > perl.ipf

in F</perllib/lib/pod> directory, then

	ipfc /inf perl.ipf

(Expect a lot of errors during the both steps.) Now move it on your
BOOKSHELF path.

=head2 Plain text

If you have perl documentation in the source form, perl utilities
installed, and B<GNU> C<groff> installed, you may use 

	perldoc perlfunc
	perldoc less
	perldoc ExtUtils::MakeMaker

to access the perl documention in the text form (note that you may get
better results using perl manpages).

Alternately, try running pod2text on F<.pod> files.

=head2 Manpages

If you have C<man> installed on your system, and you installed perl
manpages, use something like this:

	man perlfunc
	man 3 less
	man ExtUtils.MakeMaker

to access documentation for different components of Perl. Start with

	man perl

Note that dot (F<.>) is used as a package separator for documentation
for packages, and as usual, sometimes you need to give the section - C<3>
above - to avoid shadowing by the I<less(1) manpage>.

Make sure that the directory B<above> the directory with manpages is
on our C<MANPATH>, like this

  set MANPATH=c:/man;f:/perllib/man

=head2 B<HTML>

If you have some WWW browser available, installed the Perl
documentation in the source form, and Perl utilities, you can build
B<HTML> docs. Cd to directory with F<.pod> files, and do like this

	cd f:/perllib/lib/pod
	pod2html

After this you can direct your browser the file F<perl.html> in this
directory, and go ahead with reading docs, like this:

	explore file:///f:/perllib/lib/pod/perl.html

Alternatively you may be able to get these docs prebuild from C<CPAN>.

=head2 B<GNU> C<info> files

Users of C<Emacs> would appreciate it very much, especially with
C<CPerl> mode loaded. You need to get latest C<pod2info> from C<CPAN>,
or, alternately, prebuilt info pages.

=head2 F<.PDF> files

for C<Acrobat> are available on CPAN (for slightly old version of
perl).

=head2 C<LaTeX> docs

can be constructed using C<pod2latex>.

=head1 BUILD

Here we discuss how to build Perl under OS/2. There is an alternative
(but maybe older) view on L<http://www.shadow.net/~troc/os2perl.html>.

=head2 Prerequisites

You need to have the latest B<EMX> development environment, the full
B<GNU> tool suite (C<gawk> renamed to C<awk>, and B<GNU> F<find.exe>
earlier on path than the OS/2 F<find.exe>, same with F<sort.exe>, to
check use

  find --version
  sort --version

). You need the latest version of F<pdksh> installed as F<sh.exe>.

Possible locations to get this from are

  ftp://hobbes.nmsu.edu/os2/unix/gnu/
  ftp://ftp.cdrom.com/pub/os2/unix/
  ftp://ftp.cdrom.com/pub/os2/dev32/
  ftp://ftp.cdrom.com/pub/os2/emx0.9c/


Make sure that no copies or perl are currently running.  Later steps
of the build may fail since an older version of perl.dll loaded into
memory may be found. 

Also make sure that you have F</tmp> directory on the current drive,
and F<.> directory in your C<LIBPATH>. One may try to correct the
latter condition by

  set BEGINLIBPATH .

if you use something like F<CMD.EXE> or latest versions of F<4os2.exe>.

Make sure your C<gcc> is good for C<-Zomf> linking: run C<omflibs>
script in F</emx/lib> directory.

Check that you have C<link386> installed. It comes standard with OS/2,
but may be not installed due to customization. If typing

  link386

shows you do not have it, do I<Selective install>, and choose C<Link
object modules> in I<Optional system utilites/More>. If you get into
C<link386>, press C<Ctrl-C>.

=head2 Getting perl source

You need to fetch the latest perl source (including developpers
releases). With some probability it is located in 

  http://www.perl.com/CPAN/src/5.0
  http://www.perl.com/CPAN/src/5.0/unsupported

If not, you may need to dig in the indices to find it in the directory
of the current maintainer.

Quick cycle of developpers release may break the OS/2 build time to
time, looking into 

  http://www.perl.com/CPAN/ports/os2/ilyaz/

may indicate the latest release which was publicly released by the
maintainer. Note that the release may include some additional patches
to apply to the current source of perl.

Extract it like this

  tar vzxf perl5.00409.tar.gz

You may see a message about errors while extracting F<Configure>. This is
because there is a conflict with a similarly-named file F<configure>.

Rename F<configure> to F<configure.gnu>. Extract F<Configure> like this

  tar --case-sensitive -vzxf perl5.00409.tar.gz perl5.00409/Configure

Change to the directory of extraction.

=head2 Application of the patches

You need to apply the patches in F<./os2/diff.*> and
F<./os2/POSIX.mkfifo> like this:

  gnupatch -p0 < os2\POSIX.mkfifo
  gnupatch -p0 < os2\os2\diff.configure

You may also need to apply the patches supplied with the binary
distribution of perl.

Note also that the F<db.lib> and F<db.a> from the B<EMX> distribution
are not suitable for multi-threaded compile (note that currently perl
is not multithreaded, but is compiled as multithreaded for
compatibility with B<XFree86>-OS/2). Get a corrected one from

  ftp://ftp.math.ohio-state.edu/pub/users/ilya/os2/db_mt.zip

=head2 Hand-editing

You may look into the file F<./hints/os2.sh> and correct anything
wrong you find there. I do not expect it is needed anywhere.

=head2 Making

  sh Configure -des -D prefix=f:/perllib

Prefix means where to install the resulting perl library. Giving
correct prefix you may avoid the need to specify C<PERLLIB_PREFIX>,
see L<"PERLLIB_PREFIX">.

I<Ignore the message about missing C<ln>, and about C<-c> option to
C<tr>>. In fact if you can trace where the latter spurious warning
comes from, please inform me.

Now

  make

At some moment the built may die, reporting a I<version mismatch> or
I<unable to run F<perl>>. This means that most of the build has been
finished, and it is the time to move the constructed F<perl.dll> to
some I<absolute> location in C<LIBPATH>. After this done the build
should finish without a lot of fuss. I<One can avoid it if one has the
correct prebuilt version of F<perl.dll> on C<LIBPATH>.>

Warnings which are safe to ignore: I<mkfifo() redefined> inside
F<POSIX.c>.

=head2 Testing

Now run

  make test

Some tests (4..6) should fail. Some perl invocations should end in a
segfault (system error C<SYS3175>). To get finer error reports, 

  cd t
  perl -I ../lib harness

The report you get may look like

  Failed Test  Status Wstat Total Fail  Failed  List of failed
  ---------------------------------------------------------------
  io/fs.t                      26   11  42.31%  2-5, 7-11, 18, 25
  lib/io_pipe.t     3   768     6   ??       %  ??
  lib/io_sock.t     3   768     5   ??       %  ??
  op/stat.t                    56    5   8.93%  3-4, 20, 35, 39
  Failed 4/118 test scripts, 96.61% okay. 27/2445 subtests failed, 98.90% okay.

Note that using `make test' target two more tests may fail: C<op/exec:1>
because of (mis)feature of C<pdksh>, and C<lib/posix:15>, which checks
that the buffers are not flushed on C<_exit>.

The reasons for failed tests are:

=over 8

=item F<io/fs.t>

Checks I<file system> operations. Tests:

=over 10

=item 2-5, 7-11

Check C<link()> and C<inode count> - nonesuch under OS/2.

=item 18

Checks C<atime> and C<mtime> of C<stat()> - I could not understand this test.

=item 25

Checks C<truncate()> on a filehandle just opened for write - I do not
know why this should or should not work.

=back

=item F<lib/io_pipe.t>

Checks C<IO::Pipe> module. Some feature of B<EMX> - test fork()s with
dynamic extension loaded - unsupported now.

=item F<lib/io_sock.t>

Checks C<IO::Socket> module. Some feature of B<EMX> - test fork()s
with dynamic extension loaded - unsupported now.

=item F<op/stat.t>

Checks C<stat()>. Tests:

=over 4

=item 3

Checks C<inode count> - nonesuch under OS/2.

=item 4

Checks C<mtime> and C<ctime> of C<stat()> - I could not understand this test.

=item 20

Checks C<-x> - determined by the file extension only under OS/2.

=item 35

Needs F</usr/bin>.

=item 39

Checks C<-t> of F</dev/null>. Should not fail!

=back

=back

In addition to errors, you should get a lot of warnings. 

=over 4

=item A lot of `bad free'

in databases related to Berkeley DB. This is a confirmed bug of
DB. You may disable this warnings, see L<"PERL_BADFREE">.

=item Process terminated by SIGTERM/SIGINT

This is a standard message issued by OS/2 applications. *nix
applications die in silence. It is considered a feature. One can
easily disable this by appropriate sighandlers. 

However the test engine bleeds these message to screen in unexpected
moments. Two messages of this kind I<should> be present during
testing.

=item F<*/sh.exe>: ln: not found

=item C<ls>: /dev: No such file or directory

The last two should be self-explanatory. The test suite discovers that
the system it runs on is not I<that much> *nixish.

=back

A lot of `bad free'... in databases, bug in DB confirmed on other
platforms. You may disable it by setting PERL_BADFREE environment variable
to 1.

=head2 Installing the built perl

Run

  make install

It would put the generated files into needed locations. Manually put
F<perl.exe>, F<perl__.exe> and F<perl___.exe> to a location on your
C<PATH>, F<perl.dll> to a location on your C<LIBPATH>.

Run

  make cmdscripts INSTALLCMDDIR=d:/ir/on/path

to convert perl utilities to F<.cmd> files and put them on
C<PATH>. You need to put F<.EXE>-utilities on path manually. They are
installed in C<$prefix/bin>, here C<$prefix> is what you gave to
F<Configure>, see L<Making>.

=head2 C<a.out>-style build

Proceed as above, but make F<perl_.exe> (see L<"perl_.exe">) by

  make perl_

test and install by

  make aout_test
  make aout_install

Manually put F<perl_.exe> to a location on your C<PATH>.

Since C<perl_> has the extensions prebuilt, it does not suffer from
the I<dynamic extensions + fork()> syndrom, thus the failing tests
look like

  Failed Test  Status Wstat Total Fail  Failed  List of failed
  ---------------------------------------------------------------
  io/fs.t                      26   11  42.31%  2-5, 7-11, 18, 25
  op/stat.t                    56    5   8.93%  3-4, 20, 35, 39
  Failed 2/118 test scripts, 98.31% okay. 16/2445 subtests failed, 99.35% okay.

B<Note.> The build process for C<perl_> I<does not know> about all the
dependencies, so you should make sure that anything is up-to-date,
say, by doing

  make perl.dll

first.

=head1 Build FAQ

=head2 Some C</> became C<\> in pdksh.

You have a very old pdksh. See L<Prerequisites>.

=head2 C<'errno'> - unresolved external

You do not have MT-safe F<db.lib>. See L<Prerequisites>.

=head2 Problems with C<tr>

reported with very old version of C<tr>.

=head2 Some problem (forget which ;-)

You have an older version of F<perl.dll> on your C<LIBPATH>, which
broke the build of extensions.

=head2 Library ... not found

You did not run C<omflibs>. See L<Prerequisites>.

=head2 Segfault in make

You use an old version of C<GNU> make. See L<Prerequisites>.

=head1 Specific (mis)features of OS/2 port

=head2 C<setpriority>, C<getpriority>

Note that these functions are compatible with *nix, not with the older
ports of '94 - 95. The priorities are absolute, go from 32 to -95,
lower is quickier. 0 is the default priority.

=head2 C<system()>

Multi-argument form of C<system()> allows an additional numeric
argument. The meaning of this argument is described in
L<OS2::Process>.

=head2 Additional modules:

L<OS2::Process>, L<OS2::REXX>, L<OS2::PrfDB>, L<OS2::ExtAttr>. This
modules provide access to additional numeric argument for C<system>,
to DLLs having functions with REXX signature and to REXX runtime, to
OS/2 databases in the F<.INI> format, and to Extended Attributes.

Two additional extensions by Andread Kaiser, C<OS2::UPM>, and
C<OS2::FTP>, are included into my ftp directory, mirrored on CPAN.

=head2 Prebuilt methods:

=over 4

=item C<File::Copy::syscopy>

used by C<File::Copy::copy>, see L<File::Copy/copy>.

=item C<DynaLoader::mod2fname>

used by C<DynaLoader> for DLL name mungling.

=item  C<Cwd::current_drive()>

Self explanatory.

=item  C<Cwd::sys_chdir(name)>

leaves drive as it is.

=item  C<Cwd::change_drive(name)>


=item  C<Cwd::sys_is_absolute(name)>

means has drive letter and is_rooted.

=item  C<Cwd::sys_is_rooted(name)>

means has leading C<[/\\]> (maybe after a drive-letter:).

=item  C<Cwd::sys_is_relative(name)>

means changes with current dir.

=item  C<Cwd::sys_cwd(name)>

Interface to cwd from B<EMX>. Used by C<Cwd::cwd>.

=item  C<Cwd::sys_abspath(name, dir)>

Really really odious function to implement. Returns absolute name of
file which would have C<name> if CWD were C<dir>.  C<Dir> defaults to the
current dir.

=item  C<Cwd::extLibpath([type])

Get current value of extended library search path. If C<type> is
present and I<true>, works with END_LIBPATH, otherwise with
C<BEGIN_LIBPATH>. 

=item  C<Cwd::extLibpath_set( path [, type ] )>

Set current value of extended library search path. If C<type> is
present and I<true>, works with END_LIBPATH, otherwise with
C<BEGIN_LIBPATH>. 

=back

(Note that some of these may be moved to different libraries -
eventually).


=head2 Misfeatures

=over 4

=item

Since <lockf> is present in B<EMX>, but is not functional, the same is
true for perl.

=item

Since F<sh.exe> is used for globbing (see L<perlfunc/glob>), the bugs
of F<sh.exe> plague perl as well. 

In particular, uppercase letters do not work in C<[...]>-patterns with
the current C<pdksh>.

=back

=head1 Perl flavors

Because of ideosyncrasies of OS/2 one cannot have all the eggs in the
same basket (though C<EMX> environment tries hard to overcome this
limitations, so the situation may somehow improve). There are 4
executables for Perl provided by the distribution:

=head2 F<perl.exe>

The main workhorse. This is a chimera executable: it is compiled as an
C<a.out>-style executable, but is linked with C<omf>-style dynamic
library F<perl.dll>, and with dynamic B<CRT> DLL. This executable is a
C<VIO> application.

It can load perl dynamic extensions, and it can fork(). Unfortunately,
currently it cannot fork() with dynamic extensions loaded.

B<Note.> Keep in mind that fork() is needed to open a pipe to yourself.

=head2 F<perl_.exe>

This is a statically linked C<a.out>-style executable. It can fork(),
but cannot load dynamic Perl extensions. The supplied executable has a
lot of extensions prebuilt, thus there are situations when it can
perform tasks not possible using F<perl.exe>, like fork()ing when
having some standard extension loaded. This executable is a C<VIO>
application.

B<Note.> A better behaviour could be obtained from C<perl.exe> if it
were statically linked with standard I<Perl extensions>, but
dynamically linked with the I<Perl DLL> and C<CRT> DLL. Then it would
be able to fork() with standard extensions, I<and> would be able to
dynamically load arbitrary extensions. Some changes to Makefiles and
hint files should be necessary to achieve this.

I<This is also the only executable with does not require OS/2.> The
friends locked into C<M$> world would appreciate the fact that this
executable runs under DOS, Win0.31, Win0.95 and WinNT with an
appropriate extender. See L<"Other OSes">.

=head2 F<perl__.exe>

This is the same executable as <perl___.exe>, but it is a C<PM>
application. 

B<Note.> Usually C<STDIN>, C<STDERR>, and C<STDOUT> of a C<PM>
application are redirected to C<nul>. However, it is possible to see
them if you start C<perl__.exe> from a PM program which emulates a
console window, like I<Shell mode> of C<Emacs> or C<EPM>. Thus it I<is
possible> to use Perl debugger (see L<perldebug>) to debug your PM
application.

This flavor is required if you load extensions which use C<PM>, like
the forthcoming C<Perl/Tk>.

=head2 F<perl___.exe>

This is an C<omf>-style executable which is dynamically linked to
F<perl.dll> and C<CRT> DLL. I know no advantages of this executable
over C<perl.exe>, but it cannot fork() at all. Well, one advantage is
that the build process is not so convoluted as with C<perl.exe>.

It is a C<VIO> application.

=head2 Why strange names?

Since Perl processes the C<#!>-line (cf. 
L<perlrun/DESCRIPTION>, L<perlrun/Switches>,
L<perldiag/"Not a perl script">, 
L<perldiag/"No Perl script found in input">), it should know when a
program I<is a Perl>. There is some naming convention which allows
Perl to distinguish correct lines from wrong ones. The above names are
almost the only names allowed by this convension which do not contain
digits (which have absolutely different semantics).

=head2 Why dynamic linking?

Well, having several executables dynamically linked to the same huge
library has its advantages, but this would not substantiate the
additional work to make it compile. The reason is stupid-but-quick
"hard" dynamic linking used by OS/2.

The address tables of DLLs are patches only once, when they are
loaded. The addresses of entry points into DLLs are guarantied to be
the same for all programs which use the same DLL, which reduces the
amount of runtime patching - once DLL is loaded, its code is
read-only.

While this allows some performance advantages, this makes life
terrible for developpers, since the above scheme makes it impossible
for a DLL to be resolved to a symbol in the .EXE file, since this
would need a DLL to have different relocations tables for the
executables which use it.

However, a Perl extension is forced to use some symbols from the perl
executable, say to know how to find the arguments provided on the perl
internal evaluation stack. The solution is that the main code of
interpreter should be contained in a DLL, and the F<.EXE> file just loads
this DLL into memory and supplies command-arguments.

This I<greately> increases the load time for the application (as well as
the number of problems during compilation). Since interpreter is in a DLL,
the C<CRT> is basically forced to reside in a DLL as well (otherwise
extensions would not be able to use C<CRT>).

=head2 Why chimera build?

Current C<EMX> environment does not allow DLLs compiled using Unixish
C<a.out> format to export symbols for data. This forces C<omf>-style
compile of F<perl.dll>.

Current C<EMX> environment does not allow F<.EXE> files compiled in
C<omf> format to fork(). fork() is needed for exactly three Perl
operations:

=over 4

=item explicit fork()

in the script, and

=item open FH, "|-"

=item open FH, "-|"

opening pipes to itself.

=back

While these operations are not questions of life and death, a lot of
useful scripts use them. This forces C<a.out>-style compile of
F<perl.exe>.


=head1 ENVIRONMENT

Here we list environment variables with are either OS/2-specific, or
are more important under OS/2 than under other OSes.

=head2 C<PERLLIB_PREFIX>

Specific for OS/2. Should have the form

  path1;path2

or

  path1 path2

If the beginning of some prebuilt path matches F<path1>, it is
substituted with F<path2>.

Should be used if the perl library is moved from the default
location in preference to C<PERL(5)LIB>, since this would not leave wrong
entries in <@INC>. 

=head2 C<PERL_BADLANG>

If 1, perl ignores setlocale() failing. May be useful with some
strange I<locale>s.

=head2 C<PERL_BADFREE>

If 1, perl would not warn of in case of unwarranted free(). May be
useful in conjunction with the module DB_File, since Berkeley DB
memory handling code is buggy.

=head2 C<PERL_SH_DIR>

Specific for OS/2. Gives the directory part of the location for
F<sh.exe>.

=head2 C<TMP> or C<TEMP>

Specific for OS/2. Used as storage place for temporary files, most
notably C<-e> scripts.

=head1 Evolution

Here we list major changes which could make you by surprise.

=head2 Priorities

C<setpriority> and C<getpriority> are not compatible with earlier
ports by Andreas Kaiser. See C<"setpriority, getpriority">.

=head2 DLL name mungling

With the release 5.003_01 the dynamically loadable libraries
should be rebuilt. In particular, DLLs are now created with the names
which contain a checksum, thus allowing workaround for OS/2 scheme of
caching DLLs.

=head2 Threading

As of release 5.003_01 perl is linked to multithreaded C<CRT>
DLL. Perl itself is not multithread-safe, as is not perl
malloc(). However, extensions may use multiple thread on their own
risk. 

Needed to compile C<Perl/Tk> for C<XFreeOS/2> out-of-the-box.

=head2 Calls to external programs

Due to a popular demand the perl external program calling has been
changed wrt Andread Kaiser's port.  I<If> perl needs to call an
external program I<via shell>, the F<f:/bin/sh.exe> will be called, or
whatever is the override, see L<"PERL_SH_DIR">.

Thus means that you need to get some copy of a F<sh.exe> as well (I
use one from pdksh). The drive F: above is set up automatically during
the build to a correct value on the builder machine, but is
overridable at runtime,

B<Reasons:> a consensus on C<perl5-porters> was that perl should use
one non-overridable shell per platform. The obvious choices for OS/2
are F<cmd.exe> and F<sh.exe>. Having perl build itself would be impossible
with F<cmd.exe> as a shell, thus I picked up C<sh.exe>. Thus assures almost
100% compatibility with the scripts coming from *nix.

B<Disadvantages:> currently F<sh.exe> of C<pdksh> calls external programs
via fork()/exec(), and there is I<no> functioning exec() on
OS/2. exec() is emulated by EMX by asyncroneous call while the caller
waits for child completion (to pretend that the pid did not change). This
means that 1 I<extra> copy of F<sh.exe> is made active via fork()/exec(),
which may lead to some resources taken from the system (even if we do
not count extra work needed for fork()ing).

One can always start F<cmd.exe> explicitely via

  system 'cmd', '/c', 'mycmd', 'arg1', 'arg2', ...

If you need to use F<cmd.exe>, and do not want to hand-edit thousends of your
scripts, the long-term solution proposed on p5-p is to have a directive

  use OS2::Cmd;

which will override system(), exec(), C<``>, and
C<open(,'...|')>. With current perl you may override only system(),
readpipe() - the explicit version of C<``>, and maybe exec(). The code
will substitute the one-argument call to system() by
C<CORE::system('cmd.exe', '/c', shift)>.

If you have some working code for C<OS2::Cmd>, please send it to me,
I will include it into distribution. I have no need for such a module, so
cannot test it.

=cut

OS/2 extensions
~~~~~~~~~~~~~~~
I include 3 extensions by Andread Kaiser, OS2::REXX, OS2::UPM, and OS2::FTP, 
into my ftp directory, mirrored on CPAN. I made
some minor changes needed to compile them by standard tools. I cannot 
test UPM and FTP, so I will appreciate your feedback. Other extensions
there are OS2::ExtAttr, OS2::PrfDB for tied access to EAs and .INI
files - and maybe some other extensions at the time you read it.

Note that OS2 perl defines 2 pseudo-extension functions
OS2::Copy::copy and DynaLoader::mod2fname.

The -R switch of older perl is deprecated. If you need to call a REXX code
which needs access to variables, include the call into a REXX compartment
created by 
	REXX_call {...block...};

Two new functions are supported by REXX code, 
	REXX_eval 'string';
	REXX_eval_with 'string', REXX_function_name => \&perl_sub_reference;

If you have some other extensions you want to share, send the code to
me.  At least two are available: tied access to EA's, and tied access
to system databases.

=head1 AUTHOR

Ilya Zakharevich, ilya@math.ohio-state.edu

=head1 SEE ALSO

perl(1).

=cut

