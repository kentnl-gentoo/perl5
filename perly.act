/* -*- buffer-read-only: t -*-
   !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
   This file is built by regen_perly.pl from perly.y.
   Any changes made here will be lost!
 */

case 2:
#line 118 "perly.y" /* yacc.c:1646  */
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			}

    break;

  case 3:
#line 123 "perly.y" /* yacc.c:1646  */
    {
			  newPROG(block_end((ps[-1].val.ival),(ps[0].val.opval)));
			  PL_compiling.cop_seq = 0;
			  (yyval.ival) = 0;
			}

    break;

  case 4:
#line 129 "perly.y" /* yacc.c:1646  */
    {
			  parser->expect = XTERM;
                          (yyval.ival) = 0;
			}

    break;

  case 5:
#line 134 "perly.y" /* yacc.c:1646  */
    {
			  PL_eval_root = (ps[0].val.opval);
			  (yyval.ival) = 0;
			}

    break;

  case 6:
#line 139 "perly.y" /* yacc.c:1646  */
    {
			  parser->expect = XBLOCK;
                          (yyval.ival) = 0;
			}

    break;

  case 7:
#line 144 "perly.y" /* yacc.c:1646  */
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[0].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			}

    break;

  case 8:
#line 152 "perly.y" /* yacc.c:1646  */
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			}

    break;

  case 9:
#line 157 "perly.y" /* yacc.c:1646  */
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[0].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			}

    break;

  case 10:
#line 165 "perly.y" /* yacc.c:1646  */
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			}

    break;

  case 11:
#line 170 "perly.y" /* yacc.c:1646  */
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[0].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			}

    break;

  case 12:
#line 178 "perly.y" /* yacc.c:1646  */
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			}

    break;

  case 13:
#line 183 "perly.y" /* yacc.c:1646  */
    {
			  PL_eval_root = (ps[0].val.opval);
			  (yyval.ival) = 0;
			}

    break;

  case 14:
#line 191 "perly.y" /* yacc.c:1646  */
    { if (parser->copline > (line_t)(ps[-3].val.ival))
			      parser->copline = (line_t)(ps[-3].val.ival);
			  (yyval.opval) = block_end((ps[-2].val.ival), (ps[-1].val.opval));
			}

    break;

  case 15:
#line 199 "perly.y" /* yacc.c:1646  */
    { if (parser->copline > (line_t)(ps[-6].val.ival))
			      parser->copline = (line_t)(ps[-6].val.ival);
			  (yyval.opval) = block_end((ps[-5].val.ival), (ps[-2].val.opval));
			}

    break;

  case 16:
#line 206 "perly.y" /* yacc.c:1646  */
    { (yyval.ival) = block_start(TRUE);
			  parser->parsed_sub = 0; }

    break;

  case 17:
#line 211 "perly.y" /* yacc.c:1646  */
    { if (parser->copline > (line_t)(ps[-3].val.ival))
			      parser->copline = (line_t)(ps[-3].val.ival);
			  (yyval.opval) = block_end((ps[-2].val.ival), (ps[-1].val.opval));
			}

    break;

  case 18:
#line 218 "perly.y" /* yacc.c:1646  */
    { (yyval.ival) = block_start(FALSE);
			  parser->parsed_sub = 0; }

    break;

  case 19:
#line 224 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 20:
#line 226 "perly.y" /* yacc.c:1646  */
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[-1].val.opval), (ps[0].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[-1].val.opval) && (ps[0].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			}

    break;

  case 21:
#line 235 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 22:
#line 237 "perly.y" /* yacc.c:1646  */
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[-1].val.opval), (ps[0].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[-1].val.opval) && (ps[0].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			}

    break;

  case 23:
#line 246 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = (ps[0].val.opval) ? newSTATEOP(0, NULL, (ps[0].val.opval)) : NULL;
			}

    break;

  case 24:
#line 250 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 25:
#line 254 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = newSTATEOP(SVf_UTF8 * (ps[-1].val.pval)[strlen((ps[-1].val.pval))+1], (ps[-1].val.pval), (ps[0].val.opval));
			}

    break;

  case 26:
#line 258 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = newSTATEOP(SVf_UTF8 * (ps[-1].val.pval)[strlen((ps[-1].val.pval))+1], (ps[-1].val.pval), (ps[0].val.opval));
			}

    break;

  case 27:
#line 265 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 28:
#line 267 "perly.y" /* yacc.c:1646  */
    {
			  CV *fmtcv = PL_compcv;
			  newFORM((ps[-2].val.ival), (ps[-1].val.opval), (ps[0].val.opval));
			  (yyval.opval) = NULL;
			  if (CvOUTSIDE(fmtcv) && !CvEVAL(CvOUTSIDE(fmtcv))) {
			      pad_add_weakref(fmtcv);
			  }
			  parser->parsed_sub = 1;
			}

    break;

  case 29:
#line 277 "perly.y" /* yacc.c:1646  */
    {
			  if ((ps[-1].val.opval)->op_type == OP_CONST) {
			    const char *const name =
				SvPV_nolen_const(((SVOP*)(ps[-1].val.opval))->op_sv);
			    if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT") || strEQ(name, "CHECK")
			      || strEQ(name, "UNITCHECK"))
			      CvSPECIAL_on(PL_compcv);
			  }
			  else
			  /* State subs inside anonymous subs need to be
			     clonable themselves. */
			  if (CvANON(CvOUTSIDE(PL_compcv))
			   || CvCLONE(CvOUTSIDE(PL_compcv))
			   || !PadnameIsSTATE(PadlistNAMESARRAY(CvPADLIST(
						CvOUTSIDE(PL_compcv)
					     ))[(ps[-1].val.opval)->op_targ]))
			      CvCLONE_on(PL_compcv);
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
			}

    break;

  case 30:
#line 299 "perly.y" /* yacc.c:1646  */
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (ps[-5].val.opval)->op_type == OP_CONST
			      ? newATTRSUB((ps[-4].val.ival), (ps[-5].val.opval), (ps[-2].val.opval), (ps[-1].val.opval), (ps[0].val.opval))
			      : newMYSUB((ps[-4].val.ival), (ps[-5].val.opval), (ps[-2].val.opval), (ps[-1].val.opval), (ps[0].val.opval))
			  ;
			  (yyval.opval) = NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			}

    break;

  case 31:
#line 310 "perly.y" /* yacc.c:1646  */
    {
			  if ((ps[-1].val.opval)->op_type == OP_CONST) {
			    const char *const name =
				SvPV_nolen_const(((SVOP*)(ps[-1].val.opval))->op_sv);
			    if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT") || strEQ(name, "CHECK")
			      || strEQ(name, "UNITCHECK"))
			      CvSPECIAL_on(PL_compcv);
			  }
			  else
			  /* State subs inside anonymous subs need to be
			     clonable themselves. */
			  if (CvANON(CvOUTSIDE(PL_compcv))
			   || CvCLONE(CvOUTSIDE(PL_compcv))
			   || !PadnameIsSTATE(PadlistNAMESARRAY(CvPADLIST(
						CvOUTSIDE(PL_compcv)
					     ))[(ps[-1].val.opval)->op_targ]))
			      CvCLONE_on(PL_compcv);
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
			}

    break;

  case 32:
#line 332 "perly.y" /* yacc.c:1646  */
    {
			  OP *body;
			  if (parser->copline > (line_t)(ps[-2].val.ival))
			      parser->copline = (line_t)(ps[-2].val.ival);
			  body = block_end((ps[-5].val.ival),
				op_append_list(OP_LINESEQ, (ps[-4].val.opval), (ps[-1].val.opval)));

			  SvREFCNT_inc_simple_void(PL_compcv);
			  (ps[-8].val.opval)->op_type == OP_CONST
			      ? newATTRSUB((ps[-7].val.ival), (ps[-8].val.opval), NULL, (ps[-3].val.opval), body)
			      : newMYSUB((ps[-7].val.ival), (ps[-8].val.opval), NULL, (ps[-3].val.opval), body)
			  ;
			  (yyval.opval) = NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			}

    break;

  case 33:
#line 349 "perly.y" /* yacc.c:1646  */
    {
			  package((ps[-1].val.opval));
			  if ((ps[-2].val.opval))
			      package_version((ps[-2].val.opval));
			  (yyval.opval) = NULL;
			}

    break;

  case 34:
#line 356 "perly.y" /* yacc.c:1646  */
    { CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ }

    break;

  case 35:
#line 358 "perly.y" /* yacc.c:1646  */
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  utilize((ps[-6].val.ival), (ps[-5].val.ival), (ps[-3].val.opval), (ps[-2].val.opval), (ps[-1].val.opval));
			  parser->parsed_sub = 1;
			  (yyval.opval) = NULL;
			}

    break;

  case 36:
#line 365 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = block_end((ps[-4].val.ival),
			      newCONDOP(0, (ps[-3].val.opval), op_scope((ps[-1].val.opval)), (ps[0].val.opval)));
			  parser->copline = (line_t)(ps[-6].val.ival);
			}

    break;

  case 37:
#line 371 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = block_end((ps[-4].val.ival),
                              newCONDOP(0, (ps[-3].val.opval), (ps[0].val.opval), op_scope((ps[-1].val.opval))));
			  parser->copline = (line_t)(ps[-6].val.ival);
			}

    break;

  case 38:
#line 377 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = block_end((ps[-3].val.ival), newGIVENOP((ps[-2].val.opval), op_scope((ps[0].val.opval)), 0));
			  parser->copline = (line_t)(ps[-5].val.ival);
			}

    break;

  case 39:
#line 382 "perly.y" /* yacc.c:1646  */
    {
			  OP *cond = (ps[-2].val.opval);
			  if ((ps[-5].val.ival))
			    cond = newBINOP(OP_SMARTMATCH, 0, newDEFSVOP(),
					    scalar(cond));
			  (yyval.opval) = block_end((ps[-3].val.ival), newWHERESOOP(cond, op_scope((ps[0].val.opval))));
			}

    break;

  case 40:
#line 390 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = block_end((ps[-5].val.ival),
				  newWHILEOP(0, 1, NULL,
				      (ps[-4].val.opval), (ps[-1].val.opval), (ps[0].val.opval), (ps[-2].val.ival)));
			  parser->copline = (line_t)(ps[-7].val.ival);
			}

    break;

  case 41:
#line 397 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = block_end((ps[-5].val.ival),
				  newWHILEOP(0, 1, NULL,
				      (ps[-4].val.opval), (ps[-1].val.opval), (ps[0].val.opval), (ps[-2].val.ival)));
			  parser->copline = (line_t)(ps[-7].val.ival);
			}

    break;

  case 42:
#line 404 "perly.y" /* yacc.c:1646  */
    { parser->expect = XTERM; }

    break;

  case 43:
#line 406 "perly.y" /* yacc.c:1646  */
    { parser->expect = XTERM; }

    break;

  case 44:
#line 409 "perly.y" /* yacc.c:1646  */
    {
			  OP *initop = (ps[-9].val.opval);
			  OP *forop = newWHILEOP(0, 1, NULL,
				      scalar((ps[-6].val.opval)), (ps[0].val.opval), (ps[-2].val.opval), (ps[-3].val.ival));
			  if (initop) {
			      forop = op_prepend_elem(OP_LINESEQ, initop,
				  op_append_elem(OP_LINESEQ,
				      newOP(OP_UNSTACK, OPf_SPECIAL),
				      forop));
			  }
			  PL_hints |= HINT_BLOCK_SCOPE;
			  (yyval.opval) = block_end((ps[-10].val.ival), forop);
			  parser->copline = (line_t)(ps[-12].val.ival);
			}

    break;

  case 45:
#line 424 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = block_end((ps[-6].val.ival), newFOROP(0, (ps[-5].val.opval), (ps[-3].val.opval), (ps[-1].val.opval), (ps[0].val.opval)));
			  parser->copline = (line_t)(ps[-8].val.ival);
			}

    break;

  case 46:
#line 429 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = block_end((ps[-4].val.ival), newFOROP(0,
				      op_lvalue((ps[-6].val.opval), OP_ENTERLOOP), (ps[-3].val.opval), (ps[-1].val.opval), (ps[0].val.opval)));
			  parser->copline = (line_t)(ps[-7].val.ival);
			}

    break;

  case 47:
#line 435 "perly.y" /* yacc.c:1646  */
    { parser->in_my = 0; (yyval.opval) = my((ps[0].val.opval)); }

    break;

  case 48:
#line 437 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = block_end(
				(ps[-7].val.ival),
				newFOROP(0,
					 op_lvalue(
					    newUNOP(OP_REFGEN, 0,
						    (ps[-5].val.opval)),
					    OP_ENTERLOOP),
					 (ps[-3].val.opval), (ps[-1].val.opval), (ps[0].val.opval))
			  );
			  parser->copline = (line_t)(ps[-9].val.ival);
			}

    break;

  case 49:
#line 450 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = block_end((ps[-4].val.ival), newFOROP(
				0, op_lvalue(newUNOP(OP_REFGEN, 0,
						     (ps[-6].val.opval)),
					     OP_ENTERLOOP), (ps[-3].val.opval), (ps[-1].val.opval), (ps[0].val.opval)));
			  parser->copline = (line_t)(ps[-8].val.ival);
			}

    break;

  case 50:
#line 458 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = block_end((ps[-4].val.ival),
				  newFOROP(0, NULL, (ps[-3].val.opval), (ps[-1].val.opval), (ps[0].val.opval)));
			  parser->copline = (line_t)(ps[-6].val.ival);
			}

    break;

  case 51:
#line 464 "perly.y" /* yacc.c:1646  */
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, NULL,
				  NULL, (ps[-1].val.opval), (ps[0].val.opval), 0);
			}

    break;

  case 52:
#line 470 "perly.y" /* yacc.c:1646  */
    {
			  package((ps[-2].val.opval));
			  if ((ps[-3].val.opval)) {
			      package_version((ps[-3].val.opval));
			  }
			}

    break;

  case 53:
#line 477 "perly.y" /* yacc.c:1646  */
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, NULL,
				  NULL, block_end((ps[-3].val.ival), (ps[-1].val.opval)), NULL, 0);
			  if (parser->copline > (line_t)(ps[-4].val.ival))
			      parser->copline = (line_t)(ps[-4].val.ival);
			}

    break;

  case 54:
#line 485 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = (ps[-1].val.opval);
			}

    break;

  case 55:
#line 489 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = newLISTOP(OP_DIE, 0, newOP(OP_PUSHMARK, 0),
				newSVOP(OP_CONST, 0, newSVpvs("Unimplemented")));
			}

    break;

  case 56:
#line 494 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = NULL;
			  parser->copline = NOLINE;
			}

    break;

  case 57:
#line 502 "perly.y" /* yacc.c:1646  */
    { OP *list;
			  if ((ps[0].val.opval)) {
			      OP *term = (ps[0].val.opval);
			      list = op_append_elem(OP_LIST, (ps[-1].val.opval), term);
			  }
			  else {
			      list = (ps[-1].val.opval);
			  }
			  if (parser->copline == NOLINE)
			       parser->copline = CopLINE(PL_curcop)-1;
			  else parser->copline--;
			  (yyval.opval) = newSTATEOP(0, NULL,
					  op_convert_list(OP_FORMLINE, 0, list));
			}

    break;

  case 58:
#line 519 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 59:
#line 521 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = op_unscope((ps[-1].val.opval)); }

    break;

  case 60:
#line 526 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 61:
#line 528 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 62:
#line 530 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[0].val.opval), (ps[-2].val.opval)); }

    break;

  case 63:
#line 532 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[0].val.opval), (ps[-2].val.opval)); }

    break;

  case 64:
#line 534 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[0].val.opval)), (ps[-2].val.opval)); }

    break;

  case 65:
#line 536 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (ps[0].val.opval), (ps[-2].val.opval)); }

    break;

  case 66:
#line 538 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newFOROP(0, NULL, (ps[0].val.opval), (ps[-2].val.opval), NULL);
			  parser->copline = (line_t)(ps[-1].val.ival); }

    break;

  case 67:
#line 541 "perly.y" /* yacc.c:1646  */
    {
			  OP *cond = (ps[0].val.opval);
			  if ((ps[-1].val.ival))
			    cond = newBINOP(OP_SMARTMATCH, 0, newDEFSVOP(),
					    scalar(cond));
			  (yyval.opval) = newWHERESOOP(cond, op_scope((ps[-2].val.opval)));
			}

    break;

  case 68:
#line 552 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 69:
#line 554 "perly.y" /* yacc.c:1646  */
    {
			  ((ps[0].val.opval))->op_flags |= OPf_PARENS;
			  (yyval.opval) = op_scope((ps[0].val.opval));
			}

    break;

  case 70:
#line 559 "perly.y" /* yacc.c:1646  */
    { parser->copline = (line_t)(ps[-5].val.ival);
			    (yyval.opval) = newCONDOP(0,
				newSTATEOP(OPf_SPECIAL,NULL,(ps[-3].val.opval)),
				op_scope((ps[-1].val.opval)), (ps[0].val.opval));
			  PL_hints |= HINT_BLOCK_SCOPE;
			}

    break;

  case 71:
#line 569 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 72:
#line 571 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = op_scope((ps[0].val.opval)); }

    break;

  case 73:
#line 576 "perly.y" /* yacc.c:1646  */
    { (yyval.ival) = (PL_min_intro_pending &&
			    PL_max_intro_pending >=  PL_min_intro_pending);
			  intro_my(); }

    break;

  case 74:
#line 582 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 76:
#line 588 "perly.y" /* yacc.c:1646  */
    { YYSTYPE tmplval;
			  (void)scan_num("1", &tmplval);
			  (yyval.opval) = tmplval.opval; }

    break;

  case 78:
#line 596 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = invert(scalar((ps[0].val.opval))); }

    break;

  case 79:
#line 601 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); intro_my(); }

    break;

  case 80:
#line 605 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); intro_my(); }

    break;

  case 81:
#line 608 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 82:
#line 609 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 83:
#line 613 "perly.y" /* yacc.c:1646  */
    { (yyval.ival) = start_subparse(FALSE, 0);
			    SAVEFREESV(PL_compcv); }

    break;

  case 84:
#line 619 "perly.y" /* yacc.c:1646  */
    { (yyval.ival) = start_subparse(FALSE, CVf_ANON);
			    SAVEFREESV(PL_compcv); }

    break;

  case 85:
#line 624 "perly.y" /* yacc.c:1646  */
    { (yyval.ival) = start_subparse(TRUE, 0);
			    SAVEFREESV(PL_compcv); }

    break;

  case 88:
#line 635 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 90:
#line 641 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 91:
#line 643 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 92:
#line 645 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 93:
#line 650 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 94:
#line 652 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 95:
#line 663 "perly.y" /* yacc.c:1646  */
    { parser->in_my = 0; (yyval.opval) = NULL; }

    break;

  case 96:
#line 665 "perly.y" /* yacc.c:1646  */
    { parser->in_my = 0; (yyval.opval) = (ps[0].val.opval); }

    break;

  case 97:
#line 670 "perly.y" /* yacc.c:1646  */
    { (yyval.ival) = '@'; }

    break;

  case 98:
#line 672 "perly.y" /* yacc.c:1646  */
    { (yyval.ival) = '%'; }

    break;

  case 99:
#line 676 "perly.y" /* yacc.c:1646  */
    {
                            I32 sigil   = (ps[-2].val.ival);
                            OP *var     = (ps[-1].val.opval);
                            OP *defexpr = (ps[0].val.opval);

                            if (parser->sig_slurpy)
                                yyerror("Multiple slurpy parameters not allowed");
                            parser->sig_slurpy = (char)sigil;

                            if (defexpr)
                                yyerror("A slurpy parameter may not have "
                                        "a default value");

                            (yyval.opval) = var ? newSTATEOP(0, NULL, var) : NULL;
                        }

    break;

  case 100:
#line 695 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 101:
#line 697 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newOP(OP_NULL, 0); }

    break;

  case 102:
#line 699 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 103:
#line 705 "perly.y" /* yacc.c:1646  */
    {
                            OP *var     = (ps[-1].val.opval);
                            OP *defexpr = (ps[0].val.opval);

                            if (parser->sig_slurpy)
                                yyerror("Slurpy parameter not last");

                            parser->sig_elems++;

                            if (defexpr) {
                                parser->sig_optelems++;

                                if (   defexpr->op_type == OP_NULL
                                    && !(defexpr->op_flags & OPf_KIDS))
                                {
                                    /* handle '$=' special case */
                                    if (var)
                                        yyerror("Optional parameter "
                                                    "lacks default expression");
                                    op_free(defexpr);
                                }
                                else { 
                                    /* a normal '=default' expression */ 
                                    OP *defop = (OP*)alloc_LOGOP(OP_ARGDEFELEM,
                                                        defexpr,
                                                        LINKLIST(defexpr));
                                    /* re-purpose op_targ to hold @_ index */
                                    defop->op_targ =
                                        (PADOFFSET)(parser->sig_elems - 1);

                                    if (var) {
                                        var->op_flags |= OPf_STACKED;
                                        (void)op_sibling_splice(var,
                                                        NULL, 0, defop);
                                        scalar(defop);
                                    }
                                    else
                                        var = newUNOP(OP_NULL, 0, defop);

                                    LINKLIST(var);
                                    /* NB: normally the first child of a
                                     * logop is executed before the logop,
                                     * and it pushes a boolean result
                                     * ready for the logop. For ARGDEFELEM,
                                     * the op itself does the boolean
                                     * calculation, so set the first op to
                                     * it instead.
                                     */
                                    var->op_next = defop;
                                    defexpr->op_next = var;
                                }
                            }
                            else {
                                if (parser->sig_optelems)
                                    yyerror("Mandatory parameter "
                                            "follows optional parameter");
                            }

                            (yyval.opval) = var ? newSTATEOP(0, NULL, var) : NULL;
                        }

    break;

  case 104:
#line 770 "perly.y" /* yacc.c:1646  */
    { parser->in_my = KEY_sigvar; (yyval.opval) = (ps[0].val.opval); }

    break;

  case 105:
#line 772 "perly.y" /* yacc.c:1646  */
    { parser->in_my = KEY_sigvar; (yyval.opval) = (ps[0].val.opval); }

    break;

  case 106:
#line 778 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[-1].val.opval); }

    break;

  case 107:
#line 780 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = op_append_list(OP_LINESEQ, (ps[-2].val.opval), (ps[0].val.opval));
			}

    break;

  case 108:
#line 784 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 109:
#line 789 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 110:
#line 791 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 111:
#line 795 "perly.y" /* yacc.c:1646  */
    {
                            ENTER;
                            SAVEIV(parser->sig_elems);
                            SAVEIV(parser->sig_optelems);
                            SAVEI8(parser->sig_slurpy);
                            parser->sig_elems    = 0;
                            parser->sig_optelems = 0;
                            parser->sig_slurpy   = 0;
                            parser->in_my        = KEY_sigvar;
                        }

    break;

  case 112:
#line 807 "perly.y" /* yacc.c:1646  */
    {
                            OP            *sigops = (ps[-1].val.opval);
                            UNOP_AUX_item *aux;
                            OP            *check;

                            if (!parser->error_count) {
                                assert(FEATURE_SIGNATURES_IS_ENABLED);
                            }

                            /* We shouldn't get here otherwise */
                            Perl_ck_warner_d(aTHX_
                                packWARN(WARN_EXPERIMENTAL__SIGNATURES),
                                "The signatures feature is experimental");

                            aux = (UNOP_AUX_item*)PerlMemShared_malloc(
                                sizeof(UNOP_AUX_item) * 3);
                            aux[0].iv = parser->sig_elems;
                            aux[1].iv = parser->sig_optelems;
                            aux[2].iv = parser->sig_slurpy;
                            check = newUNOP_AUX(OP_ARGCHECK, 0, NULL, aux);
                            sigops = op_prepend_elem(OP_LINESEQ, check, sigops);
                            sigops = op_prepend_elem(OP_LINESEQ,
                                                newSTATEOP(0, NULL, NULL),
                                                sigops);
                            /* a nextstate at the end handles context
                             * correctly for an empty sub body */
                            (yyval.opval) = op_append_elem(OP_LINESEQ,
                                                sigops,
                                                newSTATEOP(0, NULL, NULL));

                            parser->in_my = 0;
                            parser->expect = XATTRBLOCK;
                            LEAVE;
			}

    break;

  case 114:
#line 847 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 115:
#line 852 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 116:
#line 854 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newLOGOP((ps[-1].val.ival), 0, (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 117:
#line 856 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 119:
#line 862 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[-1].val.opval); }

    break;

  case 120:
#line 864 "perly.y" /* yacc.c:1646  */
    {
			  OP* term = (ps[0].val.opval);
			  (yyval.opval) = op_append_elem(OP_LIST, (ps[-2].val.opval), term);
			}

    break;

  case 122:
#line 873 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = op_convert_list((ps[-2].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[-2].val.ival),(ps[-1].val.opval)), (ps[0].val.opval)) );
			}

    break;

  case 123:
#line 877 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = op_convert_list((ps[-4].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[-4].val.ival),(ps[-2].val.opval)), (ps[-1].val.opval)) );
			}

    break;

  case 124:
#line 881 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, scalar((ps[-5].val.opval)), (ps[-1].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[-3].val.opval))));
			}

    break;

  case 125:
#line 887 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, scalar((ps[-2].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[0].val.opval))));
			}

    break;

  case 126:
#line 892 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[-1].val.opval), (ps[0].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[-2].val.opval))));
			}

    break;

  case 127:
#line 898 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[-3].val.opval), (ps[-1].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[-4].val.opval))));
			}

    break;

  case 128:
#line 904 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = op_convert_list((ps[-1].val.ival), 0, (ps[0].val.opval)); }

    break;

  case 129:
#line 906 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = op_convert_list((ps[-3].val.ival), 0, (ps[-1].val.opval)); }

    break;

  case 130:
#line 908 "perly.y" /* yacc.c:1646  */
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[-1].val.ival), 0, NULL, (ps[0].val.opval)); }

    break;

  case 131:
#line 911 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 op_append_elem(OP_LIST,
				   op_prepend_elem(OP_LIST, (ps[-1].val.opval), (ps[0].val.opval)), (ps[-4].val.opval)));
			}

    break;

  case 134:
#line 926 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP(OP_GELEM, 0, (ps[-4].val.opval), scalar((ps[-2].val.opval))); }

    break;

  case 135:
#line 928 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP(OP_AELEM, 0, oopsAV((ps[-3].val.opval)), scalar((ps[-1].val.opval)));
			}

    break;

  case 136:
#line 931 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[-4].val.opval)),OP_RV2AV),
					scalar((ps[-1].val.opval)));
			}

    break;

  case 137:
#line 936 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[-3].val.opval)),OP_RV2AV),
					scalar((ps[-1].val.opval)));
			}

    break;

  case 138:
#line 941 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP(OP_HELEM, 0, oopsHV((ps[-4].val.opval)), jmaybe((ps[-2].val.opval)));
			}

    break;

  case 139:
#line 944 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[-5].val.opval)),OP_RV2HV),
					jmaybe((ps[-2].val.opval))); }

    break;

  case 140:
#line 948 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[-4].val.opval)),OP_RV2HV),
					jmaybe((ps[-2].val.opval))); }

    break;

  case 141:
#line 952 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[-3].val.opval)))); }

    break;

  case 142:
#line 955 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[-1].val.opval),
				       newCVREF(0, scalar((ps[-4].val.opval))))); }

    break;

  case 143:
#line 960 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[-1].val.opval),
					       newCVREF(0, scalar((ps[-3].val.opval))))); }

    break;

  case 144:
#line 964 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[-2].val.opval)))); }

    break;

  case 145:
#line 967 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newSLICEOP(0, (ps[-1].val.opval), (ps[-4].val.opval)); }

    break;

  case 146:
#line 969 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newSLICEOP(0, (ps[-1].val.opval), (ps[-3].val.opval)); }

    break;

  case 147:
#line 971 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newSLICEOP(0, (ps[-1].val.opval), NULL); }

    break;

  case 148:
#line 976 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newASSIGNOP(OPf_STACKED, (ps[-2].val.opval), (ps[-1].val.ival), (ps[0].val.opval)); }

    break;

  case 149:
#line 978 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

    break;

  case 150:
#line 980 "perly.y" /* yacc.c:1646  */
    {   if ((ps[-1].val.ival) != OP_REPEAT)
				scalar((ps[-2].val.opval));
			    (yyval.opval) = newBINOP((ps[-1].val.ival), 0, (ps[-2].val.opval), scalar((ps[0].val.opval)));
			}

    break;

  case 151:
#line 985 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

    break;

  case 152:
#line 987 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

    break;

  case 153:
#line 989 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

    break;

  case 154:
#line 991 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

    break;

  case 155:
#line 993 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

    break;

  case 156:
#line 995 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

    break;

  case 157:
#line 997 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newRANGE((ps[-1].val.ival), scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

    break;

  case 158:
#line 999 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 159:
#line 1001 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 160:
#line 1003 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 161:
#line 1005 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = bind_match((ps[-1].val.ival), (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 162:
#line 1010 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((ps[0].val.opval))); }

    break;

  case 163:
#line 1012 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 164:
#line 1015 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[0].val.opval))); }

    break;

  case 165:
#line 1017 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP((ps[-1].val.ival), 0, scalar((ps[0].val.opval))); }

    break;

  case 166:
#line 1019 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_POSTINC, 0,
					op_lvalue(scalar((ps[-1].val.opval)), OP_POSTINC)); }

    break;

  case 167:
#line 1022 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_POSTDEC, 0,
					op_lvalue(scalar((ps[-1].val.opval)), OP_POSTDEC));}

    break;

  case 168:
#line 1025 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = op_convert_list(OP_JOIN, 0,
				       op_append_elem(
					OP_LIST,
					newSVREF(scalar(
					    newSVOP(OP_CONST,0,
						    newSVpvs("\""))
					)),
					(ps[-1].val.opval)
				       ));
			}

    break;

  case 169:
#line 1036 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
					op_lvalue(scalar((ps[0].val.opval)), OP_PREINC)); }

    break;

  case 170:
#line 1039 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
					op_lvalue(scalar((ps[0].val.opval)), OP_PREDEC)); }

    break;

  case 171:
#line 1046 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newANONLIST((ps[-1].val.opval)); }

    break;

  case 172:
#line 1048 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newANONLIST(NULL);}

    break;

  case 173:
#line 1050 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newANONHASH((ps[-2].val.opval)); }

    break;

  case 174:
#line 1052 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newANONHASH(NULL); }

    break;

  case 175:
#line 1054 "perly.y" /* yacc.c:1646  */
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[-3].val.ival), (ps[-2].val.opval), (ps[-1].val.opval), (ps[0].val.opval)); }

    break;

  case 176:
#line 1057 "perly.y" /* yacc.c:1646  */
    {
			  OP *body;
			  if (parser->copline > (line_t)(ps[-2].val.ival))
			      parser->copline = (line_t)(ps[-2].val.ival);
			  body = block_end((ps[-5].val.ival),
				op_append_list(OP_LINESEQ, (ps[-4].val.opval), (ps[-1].val.opval)));
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[-6].val.ival), NULL, (ps[-3].val.opval), body);
			}

    break;

  case 177:
#line 1071 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = dofile((ps[0].val.opval), (ps[-1].val.ival));}

    break;

  case 178:
#line 1073 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, op_scope((ps[0].val.opval)));}

    break;

  case 183:
#line 1081 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newCONDOP(0, (ps[-4].val.opval), (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 184:
#line 1083 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, (ps[0].val.opval)); }

    break;

  case 185:
#line 1085 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, localize((ps[0].val.opval),1)); }

    break;

  case 186:
#line 1087 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 187:
#line 1089 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = localize((ps[0].val.opval),0); }

    break;

  case 188:
#line 1091 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = sawparens((ps[-1].val.opval)); }

    break;

  case 189:
#line 1093 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 190:
#line 1095 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = sawparens(newNULLLIST()); }

    break;

  case 191:
#line 1097 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 192:
#line 1099 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 193:
#line 1101 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 194:
#line 1103 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 195:
#line 1105 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[0].val.opval), OP_AV2ARYLEN));}

    break;

  case 196:
#line 1107 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 197:
#line 1109 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = op_prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list((ps[-1].val.opval)),
					ref((ps[-3].val.opval), OP_ASLICE)));
			  if ((yyval.opval) && (ps[-3].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[-3].val.opval)->op_private & OPpSLICEWARNING;
			}

    break;

  case 198:
#line 1119 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = op_prepend_elem(OP_KVASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVASLICE, 0,
					list((ps[-1].val.opval)),
					ref(oopsAV((ps[-3].val.opval)), OP_KVASLICE)));
			  if ((yyval.opval) && (ps[-3].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[-3].val.opval)->op_private & OPpSLICEWARNING;
			}

    break;

  case 199:
#line 1129 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = op_prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list((ps[-2].val.opval)),
					ref(oopsHV((ps[-4].val.opval)), OP_HSLICE)));
			  if ((yyval.opval) && (ps[-4].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[-4].val.opval)->op_private & OPpSLICEWARNING;
			}

    break;

  case 200:
#line 1139 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = op_prepend_elem(OP_KVHSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVHSLICE, 0,
					list((ps[-2].val.opval)),
					ref((ps[-4].val.opval), OP_KVHSLICE)));
			  if ((yyval.opval) && (ps[-4].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[-4].val.opval)->op_private & OPpSLICEWARNING;
			}

    break;

  case 201:
#line 1149 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 202:
#line 1151 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[0].val.opval))); }

    break;

  case 203:
#line 1153 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[-2].val.opval)));
			}

    break;

  case 204:
#line 1156 "perly.y" /* yacc.c:1646  */
    {
			  (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, (ps[-1].val.opval), scalar((ps[-3].val.opval))));
			}

    break;

  case 205:
#line 1161 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[0].val.opval), scalar((ps[-1].val.opval))));
			}

    break;

  case 206:
#line 1165 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newSVREF((ps[-3].val.opval)); }

    break;

  case 207:
#line 1167 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newAVREF((ps[-3].val.opval)); }

    break;

  case 208:
#line 1169 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newHVREF((ps[-3].val.opval)); }

    break;

  case 209:
#line 1171 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0,
				       scalar(newCVREF((ps[-1].val.ival),(ps[-3].val.opval)))); }

    break;

  case 210:
#line 1174 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newGVREF(0,(ps[-3].val.opval)); }

    break;

  case 211:
#line 1176 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newOP((ps[0].val.ival), OPf_SPECIAL);
			    PL_hints |= HINT_BLOCK_SCOPE; }

    break;

  case 212:
#line 1179 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newLOOPEX((ps[-1].val.ival),(ps[0].val.opval)); }

    break;

  case 213:
#line 1181 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[0].val.opval))); }

    break;

  case 214:
#line 1183 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newOP((ps[0].val.ival), 0); }

    break;

  case 215:
#line 1185 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP((ps[-1].val.ival), 0, (ps[0].val.opval)); }

    break;

  case 216:
#line 1187 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP((ps[-1].val.ival), 0, (ps[0].val.opval)); }

    break;

  case 217:
#line 1189 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newOP(OP_REQUIRE, (ps[0].val.ival) ? OPf_SPECIAL : 0); }

    break;

  case 218:
#line 1191 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_REQUIRE, (ps[-1].val.ival) ? OPf_SPECIAL : 0, (ps[0].val.opval)); }

    break;

  case 219:
#line 1193 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[0].val.opval))); }

    break;

  case 220:
#line 1195 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[0].val.opval), scalar((ps[-1].val.opval)))); }

    break;

  case 221:
#line 1198 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newOP((ps[0].val.ival), 0); }

    break;

  case 222:
#line 1200 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newOP((ps[-2].val.ival), 0);}

    break;

  case 223:
#line 1202 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 224:
#line 1204 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[-2].val.opval); }

    break;

  case 225:
#line 1206 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[0].val.opval))); }

    break;

  case 226:
#line 1208 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = ((ps[-2].val.ival) == OP_NOT)
                          ? newUNOP((ps[-2].val.ival), 0, newSVOP(OP_CONST, 0, newSViv(0)))
                          : newOP((ps[-2].val.ival), OPf_SPECIAL); }

    break;

  case 227:
#line 1212 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP((ps[-3].val.ival), 0, (ps[-1].val.opval)); }

    break;

  case 228:
#line 1214 "perly.y" /* yacc.c:1646  */
    {
			    if (   (ps[0].val.opval)->op_type != OP_TRANS
			        && (ps[0].val.opval)->op_type != OP_TRANSR
				&& (((PMOP*)(ps[0].val.opval))->op_pmflags & PMf_HAS_CV))
			    {
				(yyval.ival) = start_subparse(FALSE, CVf_ANON);
				SAVEFREESV(PL_compcv);
			    } else
				(yyval.ival) = 0;
			}

    break;

  case 229:
#line 1225 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = pmruntime((ps[-5].val.opval), (ps[-2].val.opval), (ps[-1].val.opval), 1, (ps[-4].val.ival)); }

    break;

  case 233:
#line 1233 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = my_attrs((ps[-1].val.opval),(ps[0].val.opval)); }

    break;

  case 234:
#line 1235 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = localize((ps[0].val.opval),1); }

    break;

  case 235:
#line 1237 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, my_attrs((ps[-1].val.opval),(ps[0].val.opval))); }

    break;

  case 236:
#line 1242 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = sawparens((ps[-1].val.opval)); }

    break;

  case 237:
#line 1244 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = sawparens(newNULLLIST()); }

    break;

  case 238:
#line 1247 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 239:
#line 1249 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 240:
#line 1251 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 241:
#line 1256 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 242:
#line 1258 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 243:
#line 1262 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 244:
#line 1264 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 245:
#line 1268 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = NULL; }

    break;

  case 246:
#line 1270 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 247:
#line 1276 "perly.y" /* yacc.c:1646  */
    { parser->in_my = 0; (yyval.opval) = my((ps[0].val.opval)); }

    break;

  case 255:
#line 1293 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newCVREF((ps[-1].val.ival),(ps[0].val.opval)); }

    break;

  case 256:
#line 1297 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newSVREF((ps[0].val.opval)); }

    break;

  case 257:
#line 1301 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newAVREF((ps[0].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[-1].val.ival);
			}

    break;

  case 258:
#line 1307 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newHVREF((ps[0].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[-1].val.ival);
			}

    break;

  case 259:
#line 1313 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newAVREF((ps[0].val.opval)); }

    break;

  case 260:
#line 1315 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newAVREF((ps[-3].val.opval)); }

    break;

  case 261:
#line 1319 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newGVREF(0,(ps[0].val.opval)); }

    break;

  case 263:
#line 1324 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newAVREF((ps[-2].val.opval)); }

    break;

  case 265:
#line 1329 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newHVREF((ps[-2].val.opval)); }

    break;

  case 267:
#line 1334 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = newGVREF(0,(ps[-2].val.opval)); }

    break;

  case 268:
#line 1339 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = scalar((ps[0].val.opval)); }

    break;

  case 269:
#line 1341 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = scalar((ps[0].val.opval)); }

    break;

  case 270:
#line 1343 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = op_scope((ps[0].val.opval)); }

    break;

  case 271:
#line 1346 "perly.y" /* yacc.c:1646  */
    { (yyval.opval) = (ps[0].val.opval); }

    break;



      default: break;
    

/* Generated from:
 * 1d0c087affbf85a8f1482eb4d34eefd435666c6d9e1cb4d7f9d1aeb62b37e907 perly.y
 * b6fae5748f9bef6db4740aa5e122b84ac5181852d42474d0ecad621fa4253306 regen_perly.pl
 * ex: set ro: */
